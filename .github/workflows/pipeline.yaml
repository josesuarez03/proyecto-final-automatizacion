name: Task Manager CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: docker
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node for frontend
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install and test frontend
        run: |
          cd frontend
          npm install
          npm run test

  build-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image for nginx (frontend)
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:nginx-$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:nginx-$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:nginx-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:nginx
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:nginx

      - name: Build and push Docker image for api (backend)
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:api-$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:api-$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:api-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:api
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:api

      - name: Build and push Docker image for grafana
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:grafana-$IMAGE_TAG ./elk-config/grafana
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:grafana-$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:grafana-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:grafana
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:grafana

      - name: Build and push Docker image for prometheus
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:prometheus-$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:prometheus-$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:prometheus-$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:prometheus
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:prometheus

      - name: Build Frontend App
        run: |
          cd frontend
          npm install
          npm run build

  infrastructure:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.0'

      - name: Terraform Init
        working-directory: ./iac
        run: terraform init

      - name: Terraform Plan
        working-directory: ./iac
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./iac
        run: terraform apply -auto-approve tfplan
